import os
import json
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)
from dotenv import load_dotenv

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ADMIN_ID = os.getenv("ADMIN_USER_ID")

if not TOKEN or len(TOKEN) < 36:
    raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")

# === –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ ===
ORDERS_FILE = 'orders.json'

# === –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
AWAITING_ADDRESS = 'awaiting_address'
AWAITING_PAYMENT_CONFIRMATION = 'awaiting_payment_confirmation'

# === –¢–æ–≤–∞—Ä—ã ===
products = {
    "apple": {"id": "apple", "name": "üçé –Ø–±–ª–æ–∫–æ", "price": 50},
    "banana": {"id": "banana", "name": "üçå –ë–∞–Ω–∞–Ω", "price": 70},
    "orange": {"id": "orange", "name": "üçä –ê–ø–µ–ª—å—Å–∏–Ω", "price": 80},
    "bread": {"id": "bread", "name": "üçû –•–ª–µ–±", "price": 40},
}

# === –ó–∞–≥—Ä—É–∑–∫–∞/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ ===
def load_orders():
    if os.path.exists(ORDERS_FILE):
        with open(ORDERS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return []

def save_order(order):
    orders = load_orders()
    orders.append(order)
    with open(ORDERS_FILE, 'w', encoding='utf-8') as f:
        json.dump(orders, f, ensure_ascii=False, indent=2)

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ===
def is_admin(user_id):
    return str(user_id) == ADMIN_ID

def admin_only(handler):
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        if not is_admin(user.id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        return await handler(update, context)
    return wrapper

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cart_count = len(context.user_data.get('cart', []))
    keyboard = [
        [InlineKeyboardButton("üç¥ –ú–µ–Ω—é", callback_data='menu')],
        [InlineKeyboardButton(f"üõí –ö–æ—Ä–∑–∏–Ω–∞ ({cart_count})", callback_data='cart')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        await update.message.reply_text(
            "*–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω!*",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    else:
        await update.callback_query.message.edit_text(
            "*–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω!*",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

# === –ö–æ–º–∞–Ω–¥–∞ /help ===
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/checkout - –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"
    )

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏) ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = context.user_data.get('state')

    # === –£–∫–∞–∑–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ ===
    if state == AWAITING_ADDRESS:
        address = update.message.text.strip()
        if address:
            context.user_data['delivery_address'] = address
            context.user_data['state'] = None
            keyboard = [[InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –¢–∏–Ω—å–∫–æ—Ñ—Ñ", callback_data='pay_tinkoff')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text("üì¨ –ê–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å.", reply_markup=reply_markup)
        else:
            await update.message.reply_text("‚ùå –ê–¥—Ä–µ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")

    # === –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —á–µ–∫–∞ –∞–¥–º–∏–Ω—É ===
    elif update.message and update.message.from_user.id != int(ADMIN_ID):
        await update.message.forward(chat_id=ADMIN_ID)
        await update.message.reply_text("üì∏ –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à —á–µ–∫. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")

# === –ö–æ–º–∞–Ω–¥–∞ /checkout ===
async def checkout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cart = context.user_data.get('cart', [])
    if not cart:
        await update.message.reply_text("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return

    total = sum(item['price'] for item in cart)
    cart_text = "\n".join([f"{item['name']} - {item['price']} —Ä—É–±." for item in cart])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
    order = {
        'user_id': update.effective_user.id,
        'user_name': update.effective_user.full_name,
        'cart': cart,
        'total': total,
        'status': 'pending'
    }

    context.user_data['current_order'] = order

    keyboard = [
        [InlineKeyboardButton("üè† –£–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å", callback_data='set_address')],
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –¢–∏–Ω—å–∫–æ—Ñ—Ñ", callback_data='pay_tinkoff')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"*–í–∞—à –∑–∞–∫–∞–∑:*\n{cart_text}\n\n*–ò—Ç–æ–≥–æ: {total} —Ä—É–±.*\n"
        "–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª.",
        parse_mode='Markdown',
        reply_markup=reply_markup
    )

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ ===
async def main_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query

    try:
        await query.answer()
    except Exception as e:
        logger.warning(f"[Callback] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ: {e}")
        return

    data = query.data

    if data == 'menu':
        await show_menu(update, context)
    elif data == 'cart':
        await show_cart(update, context)
    elif data == 'back':
        await start(update, context)
    elif data == 'clear_cart':
        await clear_cart(update, context)
    elif data.startswith('add_'):
        await add_to_cart(update, context)
    elif data.startswith('remove_'):
        await remove_from_cart(update, context)
    elif data == 'checkout_order':
        await checkout_order(update, context)
    elif data == 'set_address':
        await query.edit_message_text("üì¨ –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
        context.user_data['state'] = AWAITING_ADDRESS
    elif data == 'pay_tinkoff':
        await pay_tinkoff(update, context)
    elif data == 'confirm_payment':
        await confirm_payment(update, context)
    elif data.startswith('approve_'):
        await approve_payment(update, context)
    elif data == 'admin_panel':
        await admin_panel(update, context)
    elif data == 'admin_orders':
        await list_orders(update, context)
    elif data == 'admin_products':
        await product_settings(update, context)
    elif data.startswith('delete_product_'):
        product_id = data.split('_')[2]
        if product_id in products:
            del products[product_id]
            await query.edit_message_text(f"‚úÖ –¢–æ–≤–∞—Ä '{product_id}' —É–¥–∞–ª—ë–Ω.")
        await product_settings(update, context)

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–µ –º–µ–Ω—é ===
async def show_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    keyboard = []
    for product_id, product in products.items():
        keyboard.append([InlineKeyboardButton(
            f"{product['name']} - {product['price']} —Ä—É–±.",
            callback_data=f"add_{product_id}"
        )])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("*–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:*", parse_mode='Markdown', reply_markup=reply_markup)

async def add_to_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    product_id = query.data.split('_')[1]
    if 'cart' not in context.user_data:
        context.user_data['cart'] = []
    context.user_data['cart'].append(products[product_id])
    await query.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {products[product_id]['name']}")

async def remove_from_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    index = int(query.data.split('_')[1])
    cart = context.user_data.get('cart', [])
    if 0 <= index < len(cart):
        removed = cart.pop(index)
        context.user_data['cart'] = cart
        await query.answer(f"‚ùå –£–¥–∞–ª–µ–Ω–æ: {removed['name']}")
    await show_cart(update, context)

async def show_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    cart = context.user_data.get('cart', [])
    if not cart:
        await query.edit_message_text("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
        return

    total = sum(item['price'] for item in cart)
    cart_text = "\n".join([f"{i+1}. {item['name']} - {item['price']} —Ä—É–±." for i, item in enumerate(cart)])
    
    keyboard = [
        [InlineKeyboardButton("üç¥ –í –º–µ–Ω—é", callback_data='menu')],
        [InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data='clear_cart')],
        [InlineKeyboardButton("üì¶ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data='checkout_order')]
    ]

    for i in range(len(cart)):
        keyboard.append([InlineKeyboardButton(f"‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä #{i+1}", callback_data=f"remove_{i}")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        f"*–í–∞—à –∑–∞–∫–∞–∑:*\n{cart_text}\n\n*–ò—Ç–æ–≥–æ: {total} —Ä—É–±.*",
        parse_mode='Markdown',
        reply_markup=reply_markup
    )

async def clear_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    context.user_data['cart'] = []
    await query.answer("üóë –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!")
    await show_cart(update, context)

# === –ö–Ω–æ–ø–∫–∞ "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑" ===
async def checkout_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    cart = context.user_data.get('cart', [])
    if not cart:
        await query.edit_message_text("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
        return

    total = sum(item['price'] for item in cart)
    cart_text = "\n".join([f"{item['name']} - {item['price']} —Ä—É–±." for item in cart])

    context.user_data['current_order'] = {
        'cart': cart,
        'total': total
    }

    keyboard = [
        [InlineKeyboardButton("üè† –£–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å", callback_data='set_address')],
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –¢–∏–Ω—å–∫–æ—Ñ—Ñ", callback_data='pay_tinkoff')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        f"*–í–∞—à –∑–∞–∫–∞–∑:*\n{cart_text}\n\n*–ò—Ç–æ–≥–æ: {total} —Ä—É–±.*\n"
        "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏, –∞ –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª.",
        parse_mode='Markdown',
        reply_markup=reply_markup
    )

# === –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –¢–∏–Ω—å–∫–æ—Ñ—Ñ ===
async def pay_tinkoff(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    order = context.user_data.get('current_order')
    if not order:
        await query.edit_message_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–µ.")
        return

    tinkoff_details = (
        "üí≥ *–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã (–¢–∏–Ω—å–∫–æ—Ñ—Ñ)*\n"
        "–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: `2200 7019 3724 2698`\n"
        "–§–ò–û: –ë–µ–ª–æ—É—Å–æ–≤ –ê–Ω–¥—Ä–µ–π –ù–∏–∫–æ–ª–∞–µ–≤–∏—á\n"
        "–¢–µ–ª–µ—Ñ–æ–Ω: 89225075311\n"
        f"üí∞ –°—É–º–º–∞: {order['total']} —Ä—É–±."
    )

    await query.message.reply_text(tinkoff_details, parse_mode='Markdown')
    context.user_data['state'] = AWAITING_PAYMENT_CONFIRMATION

    keyboard = [[InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data='confirm_payment')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_reply_markup(reply_markup=reply_markup)

# === –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ===
async def confirm_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º...")

    order = context.user_data.get('current_order')
    if not order:
        await query.edit_message_text("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    user = update.effective_user
    message = (
        f"üîî *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ{hash(user.id)}*\n"
        f"–ö–ª–∏–µ–Ω—Ç: {user.full_name} (ID: {user.id})\n"
        f"–¢–æ–≤–∞—Ä—ã:\n" + "\n".join([f"- {item['name']} - {item['price']} —Ä—É–±." for item in order['cart']]) +
        f"\nüí∞ –°—É–º–º–∞: {order['total']} —Ä—É–±.\n"
        f"–ê–¥—Ä–µ—Å: {context.user_data.get('delivery_address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É:"
    )

    keyboard = [[InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"approve_{user.id}")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if ADMIN_ID:
        await context.bot.send_message(chat_id=ADMIN_ID, text=message, parse_mode='Markdown', reply_markup=reply_markup)
    else:
        logger.warning("–ù–µ —É–∫–∞–∑–∞–Ω ADMIN_ID ‚Äî –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.")

    await query.edit_message_text("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª¬ª, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç—ë–∂.")

# === –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–º ===
async def approve_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = int(query.data.split('_')[1])
    user = await context.bot.get_chat(user_id)

    # === –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π ===
    order = context.user_data.get('current_order')
    if order:
        order['status'] = 'paid'
        order['delivery_address'] = context.user_data.get('delivery_address', '–ù–µ —É–∫–∞–∑–∞–Ω')
        save_order(order)

    # === –ß–µ–∫ –∫–ª–∏–µ–Ω—Ç—É —Å –∞–¥—Ä–µ—Å–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏ ===
    receipt = (
        "üßæ *–ß–µ–∫*\n"
        f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {user.full_name} (ID: {user.id})\n"
        f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {order.get('delivery_address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        "–ó–∞–∫–∞–∑–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:\n" + "\n".join([f"- {item['name']} - {item['price']} —Ä—É–±." for item in order['cart']]) +
        f"\nüí∞ –ò—Ç–æ–≥–æ: {order['total']} —Ä—É–±.\n"
        "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!"
    )

    await context.bot.send_message(chat_id=user_id, text=receipt, parse_mode='Markdown')
    await query.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!", show_alert=True)
    await query.edit_message_text("‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –æ–ø–ª–∞—Ç—É.")

# === –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏ ===
@admin_only
async def admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "*üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*", 
        parse_mode='Markdown', 
        reply_markup=admin_main_keyboard()
    )

def admin_main_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üì¶ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã", callback_data='admin_orders')],
        [InlineKeyboardButton("üõç –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã", callback_data='admin_products')]
    ])

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.edit_message_text(
        "*üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*", 
        parse_mode='Markdown', 
        reply_markup=admin_main_keyboard()
    )

async def list_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    orders_list = load_orders()
    if not orders_list:
        await query.edit_message_text("üì¶ –ù–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
        return

    for order in orders_list[-5:]:
        msg = (
            f"üßæ –ó–∞–∫–∞–∑ –æ—Ç {order['user_name']} (ID: {order['user_id']})\n"
            f"–°—Ç–∞—Ç—É—Å: {order.get('status', 'pending')}\n"
            f"–ê–¥—Ä–µ—Å: {order.get('delivery_address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            "–¢–æ–≤–∞—Ä—ã:\n" + "\n".join([f"- {item['name']} - {item['price']} —Ä—É–±." for item in order['cart']]) +
            f"\nüí∞ –°—É–º–º–∞: {order['total']} —Ä—É–±."
        )
        await query.message.reply_text(msg)

async def product_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    keyboard = []
    for pid in products:
        keyboard.append([InlineKeyboardButton(f"‚ùå –£–¥–∞–ª–∏—Ç—å {pid}", callback_data=f"delete_product_{pid}")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='admin_panel')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("*–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:*", parse_mode='Markdown', reply_markup=reply_markup)

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ ===
@admin_only
async def add_product_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        name = context.args[0]
        price = int(context.args[1])
        product_id = name.lower()
        products[product_id] = {"id": product_id, "name": name, "price": price}
        await update.message.reply_text(f"‚úÖ –¢–æ–≤–∞—Ä '{name}' –¥–æ–±–∞–≤–ª–µ–Ω.")
    except (IndexError, ValueError):
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_product <–Ω–∞–∑–≤–∞–Ω–∏–µ> <—Ü–µ–Ω–∞>")

@admin_only
async def remove_product_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        product_id = context.args[0].lower()
        if product_id in products:
            del products[product_id]
            await update.message.reply_text(f"‚úÖ –¢–æ–≤–∞—Ä '{product_id}' —É–¥–∞–ª—ë–Ω.")
        else:
            await update.message.reply_text(f"‚ùå –¢–æ–≤–∞—Ä '{product_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except IndexError:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /remove_product <id>")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ ===
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {context.update}, –æ—à–∏–±–∫–∞: {context.error}")
    if update and hasattr(update, 'callback_query') and update.callback_query:
        try:
            await update.callback_query.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
def main():
    app = Application.builder().token(TOKEN).build()

    # === –ö–æ–º–∞–Ω–¥—ã ===
    app.add_handler(CommandHandler('start', start))
    app.add_handler(CommandHandler('help', help_command))
    app.add_handler(CommandHandler('admin', admin))
    app.add_handler(CommandHandler('add_product', add_product_cmd))
    app.add_handler(CommandHandler('remove_product', remove_product_cmd))

    # === –ö–Ω–æ–ø–∫–∏ ===
    app.add_handler(CallbackQueryHandler(main_button_handler))

    # === –°–æ–æ–±—â–µ–Ω–∏—è ===
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(MessageHandler(filters.PHOTO | filters.Document.ALL, handle_message))

    # === –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ ===
    app.add_error_handler(error_handler)

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == '__main__':
    main()
